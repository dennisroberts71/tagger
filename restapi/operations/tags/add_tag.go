package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddTagHandlerFunc turns a function with the right signature into a add tag handler
type AddTagHandlerFunc func(AddTagParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddTagHandlerFunc) Handle(params AddTagParams) middleware.Responder {
	return fn(params)
}

// AddTagHandler interface for that can handle valid add tag params
type AddTagHandler interface {
	Handle(AddTagParams) middleware.Responder
}

// NewAddTag creates a new http.Handler for the add tag operation
func NewAddTag(ctx *middleware.Context, handler AddTagHandler) *AddTag {
	return &AddTag{Context: ctx, Handler: handler}
}

/*AddTag swagger:route POST /tags tags addTag

Index a new tag.

Indexes a new tag in ElasticSearch.

*/
type AddTag struct {
	Context *middleware.Context
	Handler AddTagHandler
}

func (o *AddTag) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewAddTagParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
