package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

// SwaggerJSON embedded version of the swagger document used at generation time
var SwaggerJSON json.RawMessage

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Creates, updates, and deletes tags in an ElasticSearch index.",
    "title": "Tag Registration Service",
    "version": "1.0.0.0"
  },
  "paths": {
    "/": {
      "get": {
        "description": "Displays general infrormation about the service and can be used to determine whether or not the service is running.",
        "tags": [
          "status"
        ],
        "summary": "Service Status Information",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/service-info"
            }
          }
        }
      }
    },
    "/tags": {
      "post": {
        "description": "Indexes a new tag in ElasticSearch.",
        "tags": [
          "tags"
        ],
        "summary": "Index a new tag.",
        "operationId": "addTag",
        "parameters": [
          {
            "description": "The new tag to index.",
            "name": "tag-in",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tag-in"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "definitions": {
    "error-out": {
      "description": "The standard format for an error response body.",
      "type": "object",
      "required": [
        "reason"
      ],
      "properties": {
        "reason": {
          "description": "The reason for the error.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "service-info": {
      "type": "object",
      "required": [
        "description",
        "service",
        "version"
      ],
      "properties": {
        "description": {
          "description": "A brief description of the service.",
          "type": "string",
          "minLength": 1
        },
        "service": {
          "description": "The name of the service.",
          "type": "string",
          "minLength": 1
        },
        "version": {
          "description": "The service's version number.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "tag-in": {
      "type": "object",
      "required": [
        "id",
        "value",
        "creator",
        "date_created",
        "date_modified"
      ],
      "properties": {
        "creator": {
          "description": "The user who created the tag.",
          "type": "string",
          "minLength": 1
        },
        "date_created": {
          "description": "The creation timestamp for the tag.",
          "type": "integer"
        },
        "date_modified": {
          "description": "The most recent modification timestamp for the tag.",
          "type": "integer"
        },
        "description": {
          "description": "The tag description.",
          "type": "string",
          "minLength": 0
        },
        "id": {
          "description": "The tag identifier.",
          "type": "string",
          "minLength": 1
        },
        "value": {
          "description": "The tag value.",
          "type": "string",
          "minLength": 1
        }
      }
    }
  },
  "responses": {
    "bad-request": {
      "description": "Bad Request",
      "schema": {
        "$ref": "#/definitions/error-out"
      }
    },
    "internal-server-error": {
      "description": "Internal Server Error",
      "schema": {
        "$ref": "#/definitions/error-out"
      }
    }
  }
}`))
}
