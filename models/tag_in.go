package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TagIn tag in
// swagger:model tag-in
type TagIn struct {

	// The user who created the tag.
	// Required: true
	// Min Length: 1
	Creator *string `json:"creator"`

	// The creation timestamp for the tag.
	// Required: true
	DateCreated *int64 `json:"date_created"`

	// The most recent modification timestamp for the tag.
	// Required: true
	DateModified *int64 `json:"date_modified"`

	// The tag description.
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// The tag identifier.
	// Required: true
	// Min Length: 1
	ID *string `json:"id"`

	// The tag value.
	// Required: true
	// Min Length: 1
	Value *string `json:"value"`
}

// Validate validates this tag in
func (m *TagIn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreator(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TagIn) validateCreator(formats strfmt.Registry) error {

	if err := validate.Required("creator", "body", m.Creator); err != nil {
		return err
	}

	if err := validate.MinLength("creator", "body", string(*m.Creator), 1); err != nil {
		return err
	}

	return nil
}

func (m *TagIn) validateDateCreated(formats strfmt.Registry) error {

	if err := validate.Required("date_created", "body", m.DateCreated); err != nil {
		return err
	}

	return nil
}

func (m *TagIn) validateDateModified(formats strfmt.Registry) error {

	if err := validate.Required("date_modified", "body", m.DateModified); err != nil {
		return err
	}

	return nil
}

func (m *TagIn) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 0); err != nil {
		return err
	}

	return nil
}

func (m *TagIn) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	return nil
}

func (m *TagIn) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	if err := validate.MinLength("value", "body", string(*m.Value), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TagIn) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TagIn) UnmarshalBinary(b []byte) error {
	var res TagIn
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
